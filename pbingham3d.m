%------------------------------------------------------------------------
% Polar Bingham closure in three dimensions
% Input: 
%   n - first moment tensor, struct with fields n1,n2,3
%   Q - second moment tensor, struct with fields q11,q12,q13,q22,q23,q33
%   T - rotation tensor T = E + 2*zeta*c*Q, struct with fields t11,t12,t13,
%                                                              t22,t23,t33
%   cR - Chebyshev coefficients of third moment tensor
%   cS - Chebyshev coefficients of fourth moment tensor
% Output: 
%   R - third moment tensor, struct with fields r111,r112,r113,r122,r123,r133,
%                                               r222,r223,r233,r333
%   ST - contraction S:T, struct with fields st11,st12,st13,st22,st23,st33
%
% Scott Weady, CIMS
% Last updated Feb 2022
%------------------------------------------------------------------------
function [R,ST] = pbingham3d(n,Q,T,cR,cS)
    
  % Get components of first moment
  n1 = n.n1; n2 = n.n2; n3 = n.n3;

  % Get components of second moment
  q11 = Q.q11; q12 = Q.q12+1e-15; q13 = Q.q13+1e-15;
  q22 = Q.q22; q23 = Q.q23+1e-15;
  q33 = 1 - q11 - q22;
  
  % Get components of rotation tensor
  t11 = T.t11; t12 = T.t12; t13 = T.t13;
  t22 = T.t22; t23 = T.t23;
  t33 = T.t33;
  
  [N,~,~] = size(n1);

  % Solve for largest eigenvalue
  tol = 1e-15;
        
  a = q11.*q22 + q11.*q33 + q22.*q33 - (q12.^2 + q13.^2 + q23.^2);
  b = (q11).*q23.^2 + (q22).*q13.^2 + (q33).*q12.^2 - (q11).*(q22).*(q33) - ...
    2.*q13.*q12.*q23;

  mu = (1/3)*ones(N,N,N);
  fnu = mu.^3 - mu.^2 + a.*mu + b;

  iter = 1;
  max_iter = 100;
  
  while max(abs(fnu(:))) > tol && iter < max_iter
    fnu = mu.^3 - mu.^2 + a.*mu + b;
    mup1 = mu - fnu./(3.*mu.^2 - 2.*mu + a);
    mu = mup1;
    iter = iter + 1;
  end

  nu1 = mu;
  nu2 = (-(mu-1) + sqrt((mu-1).^2 - 4.*(a + mu.*(mu-1))))./2;
  nu3 = (-(mu-1) - sqrt((mu-1).^2 - 4.*(a + mu.*(mu-1))))./2;

  mu1 = max(max(nu1,nu2),nu3);
  mu3 = min(min(nu1,nu2),nu3);
  mu2 = 1 - (mu1 + mu3);

  % First eigenvector
  O11 = q12.*q23 - q13.*(q22 - mu1);
  O21 = q13.*q12 - (q11-mu1).*q23;
  O31 = (q11-mu1).*(q22-mu1) - q12.*q12;
  m1 = sqrt(O11.^2 + O21.^2 + O31.^2);
  O11 = O11./m1; O21 = O21./m1; O31 = O31./m1;

  sgn1 = sign(O11);

  O11 = O11.*sgn1;
  O21 = O21.*sgn1;
  O31 = O31.*sgn1;

  % Second eigenvector
  O12 = q12.*q23 - q13.*(q22-mu2);
  O22 = q13.*q12 - (q11-mu2).*q23;
  O32 = (q11-mu2).*(q22-mu2) - q12.*q12;
  m2 = sqrt(O12.^2 + O22.^2 + O32.^2);
  O12 = O12./m2; O22 = O22./m2; O32 = O32./m2;

  % Third eigenvector
  O13 = O21.*O32 - O31.*O22;
  O23 = O31.*O12 - O11.*O32;
  O33 = O11.*O22 - O21.*O12;
  m3 = sqrt(O13.^2 + O23.^2 + O33.^2);
  O13 = O13./m3; O23 = O23./m3; O33 = O33./m3;

  % Improve orthogonality of second eigenvector
  O12 = O21.*O33 - O31.*O23;
  O22 = O31.*O13 - O11.*O33;
  O32 = O11.*O23 - O21.*O13;
  m2 = sqrt(O12.^2 + O22.^2 + O32.^2);
  O12 = O12./m2; O22 = O22./m2; O32 = O32./m2;
  
  sgn2 = sign(O12);

  O12 = O12.*sgn2;
  O22 = O22.*sgn2;
  O32 = O32.*sgn2;
 
  % Make sure coordinates are right handed
  O13 = O21.*O32 - O31.*O22;
  O23 = O31.*O12 - O11.*O32;
  O33 = O11.*O22 - O21.*O12;
  m3 = sqrt(O13.^2 + O23.^2 + O33.^2);
  O13 = O13./m3; O23 = O23./m3; O33 = O33./m3;

  tn1 = O11.*n1 + O21.*n2 + O31.*n3;
  tn2 = O12.*n1 + O22.*n2 + O32.*n3;
  tn3 = O13.*n1 + O23.*n2 + O33.*n3;

  % Map to Chebyshev grid
  tr1 = tn1./sqrt(mu1);
  tr2 = tn2./sqrt(mu2);
  tr3 = tn3./sqrt(mu3);

  [x,y,z] = F(tr1,tr2,tr3);

  x = min(1,max(-1,x));
  y = min(1,max(-1,y));
  z = min(1,max(-1,z));

  % Domain transformations
  H1 = @(u,v) (u - 1/3) - (v - 1/3);
  H2 = @(u,v) 2*(u - 1/3) + 4*(v - 1/3);
  G1 = @(u,v) 2*(u + v) - 1;
  G2 = @(u,v) 2*(u./(u+v)) - 1;
  
  u = G1(H1(mu1,mu2),H2(mu1,mu2)); u = min(1,max(-1,u));
  v = G2(H1(mu1,mu2),H2(mu1,mu2)); v = min(1,max(-1,v));
  
  % Evaluate Chebyshev interpolants
  [tR,tS] = chebinterp(x,y,z,u,v,cR,cS);

  % Compute remaining terms
  tR.r133 = tn1 - tR.r111 - tR.r122;
  tR.r233 = tn2 - tR.r112 - tR.r222;
  tR.r333 = tn3 - tR.r113 - tR.r223;
  tS.s1133 = mu1 - tS.s1111 - tS.s1122;
  tS.s1233 = -tS.s1112 - tS.s1222;
  tS.s1333 = -tS.s1113 - tS.s1223;
  tS.s2233 = mu2 - tS.s1122 - tS.s2222;
  tS.s2333 = -tS.s1123 - tS.s2223;
  tS.s3333 = mu3 - tS.s1133 - tS.s2233;

  % Rotate R to original coordinate system
  R.r111 = rot_r111(O11,O12,O13,O21,O22,O23,O31,O32,O33,tR);
  R.r112 = rot_r112(O11,O12,O13,O21,O22,O23,O31,O32,O33,tR);
  R.r113 = rot_r113(O11,O12,O13,O21,O22,O23,O31,O32,O33,tR);
  R.r122 = rot_r122(O11,O12,O13,O21,O22,O23,O31,O32,O33,tR);
  R.r123 = rot_r123(O11,O12,O13,O21,O22,O23,O31,O32,O33,tR);
  R.r222 = rot_r222(O11,O12,O13,O21,O22,O23,O31,O32,O33,tR);
  R.r223 = rot_r223(O11,O12,O13,O21,O22,O23,O31,O32,O33,tR);
  
  R.r133 = n1 - R.r111 - R.r122;
  R.r233 = n2 - R.r112 - R.r222;
  R.r333 = n3 - R.r113 - R.r223;
  
  % Rotate T to diagonal coordinate system
  tt11 = O11.*(t11.*O11 + 2.*t12.*O21 + 2.*t13.*O31) + ...
         O21.*(t22.*O21 + 2.*t23.*O31) + t33.*O31.*O31;   

  tt12 = t11.*O11.*O12 + t12.*(O11.*O22 + O21.*O12) + ...
         t22.*O21.*O22 + t13.*(O11.*O32 + O31.*O12) + ...
         t33.*O31.*O32 + t23.*(O21.*O32 + O31.*O22);

  tt13 = t11.*O11.*O13 + t12.*(O11.*O23 + O21.*O13) + ...
         t13.*(O11.*O33 + O31.*O13) + t22.*O21.*O23 + ...
         t23.*(O21.*O33 + O31.*O23) + t33.*O31.*O33;

  tt22 = O12.*(t11.*O12 + 2.*t12.*O22 + 2.*t13.*O32) + ...
         O22.*(t22.*O22 + 2.*t23.*O32) + t33.*O32.*O32;  

  tt23 = t11.*O12.*O13 + t12.*(O12.*O23 + O22.*O13) + ...
         t13.*(O12.*O33 + O32.*O13) + t22.*O22.*O23 + ...
         t23.*(O22.*O33 + O32.*O23) + t33.*O32.*O33;

  tt33 = O13.*(t11.*O13 + 2.*t12.*O23 + 2.*t13.*O33) + ...
         O23.*(t22.*O23 + 2.*t23.*O33) + t33.*O33.*O33;  
  
  % Compute contraction tS:tT
  tst11 = (tS.s1111.*tt11 + 2*tS.s1112.*tt12 + 2*tS.s1113.*tt13 + tS.s1122.*tt22 + 2*tS.s1123.*tt23 + tS.s1133.*tt33);
  tst12 = (tS.s1112.*tt11 + 2*tS.s1122.*tt12 + 2*tS.s1123.*tt13 + tS.s1222.*tt22 + 2*tS.s1223.*tt23 + tS.s1233.*tt33);
  tst13 = (tS.s1113.*tt11 + 2*tS.s1123.*tt12 + 2*tS.s1133.*tt13 + tS.s1223.*tt22 + 2*tS.s1233.*tt23 + tS.s1333.*tt33);
  tst22 = (tS.s1122.*tt11 + 2*tS.s1222.*tt12 + 2*tS.s1223.*tt13 + tS.s2222.*tt22 + 2*tS.s2223.*tt23 + tS.s2233.*tt33);
  tst23 = (tS.s1123.*tt11 + 2*tS.s1223.*tt12 + 2*tS.s1233.*tt13 + tS.s2223.*tt22 + 2*tS.s2233.*tt23 + tS.s2333.*tt33);
  tst33 = (tS.s1133.*tt11 + 2*tS.s1233.*tt12 + 2*tS.s1333.*tt13 + tS.s2233.*tt22 + 2*tS.s2333.*tt23 + tS.s3333.*tt33);

  % Rotate tS:tT to original coordinate system
  st11 = O11.*(O11.*tst11 + O12.*tst12 + O13.*tst13) + ...
         O12.*(O11.*tst12 + O12.*tst22 + O13.*tst23) + ...
         O13.*(O11.*tst13 + O12.*tst23 + O13.*tst33);
  st12 = O11.*(O21.*tst11 + O22.*tst12 + O23.*tst13) + ...
         O12.*(O21.*tst12 + O22.*tst22 + O23.*tst23) + ...
         O13.*(O21.*tst13 + O22.*tst23 + O23.*tst33);
  st13 = O11.*(O31.*tst11 + O32.*tst12 + O33.*tst13) + ...
         O12.*(O31.*tst12 + O32.*tst22 + O33.*tst23) + ...
         O13.*(O31.*tst13 + O32.*tst23 + O33.*tst33);
  st22 = O21.*(O21.*tst11 + O22.*tst12 + O23.*tst13) + ...
         O22.*(O21.*tst12 + O22.*tst22 + O23.*tst23) + ...
         O23.*(O21.*tst13 + O22.*tst23 + O23.*tst33);
  st23 = O21.*(O31.*tst11 + O32.*tst12 + O33.*tst13) + ...
         O22.*(O31.*tst12 + O32.*tst22 + O33.*tst23) + ...
         O23.*(O31.*tst13 + O32.*tst23 + O33.*tst33);
  st33 = O31.*(O31.*tst11 + O32.*tst12 + O33.*tst13) + ...
         O32.*(O31.*tst12 + O32.*tst22 + O33.*tst23) + ...
         O33.*(O31.*tst13 + O32.*tst23 + O33.*tst33);

  % Store fields
  ST = struct('st11',st11,'st12',st12,'st13',st13,'st22',st22,'st23',st23,'st33',st33);
            
end

%-------------------------------------------------------------------------------
% Mapping from unit sphere to unit cube
%-------------------------------------------------------------------------------
function [x,y,z] = F(u,v,w)

  tol = 1e-15;
  err = 10*tol;
  max_iter = 100;
  iter = 1;
  
  x = 0.5*ones(size(u));
  y = 0.5*ones(size(v));
  z = 0.5*ones(size(w));
  usq = u.^2; vsq = v.^2; wsq = w.^2;
  
  while err > tol && iter < max_iter
    
    f1 = x.*(1 - y/2 - z/2 + y.*z/3)-usq;
    f2 = y.*(1 - x/2 - z/2 + x.*z/3)-vsq;
    f3 = z.*(1 - x/2 - y/2 + x.*y/3)-wsq;

    J11 = 1 - y/2 - z/2 + y.*z/3;
    J12 = -x/2 + x.*z/3;
    J13 = -x/2 + x.*y/3;
    
    J21 = -y/2 + y.*z/3;
    J22 = 1 - x/2 - z/2 + x.*z/3;
    J23 = -y/2 + x.*y/3;

    J31 = -z/2 + y.*z/3;
    J32 = -z/2 + x.*z/3;
    J33 = 1 - x/2 - y/2 + x.*y/3;
    
    detJ = J11.*(J22.*J33-J23.*J32)-J12.*(J21.*J33-J23.*J31)+J13.*(J21.*J32-J22.*J31);
    iJ11 = (J22.*J33-J23.*J32)./detJ;
    iJ12 = (J13.*J32-J12.*J33)./detJ;
    iJ13 = (J12.*J23-J13.*J22)./detJ;
    iJ21 = (J23.*J31-J21.*J33)./detJ;
    iJ22 = (J11.*J33-J13.*J31)./detJ;
    iJ23 = (J13.*J21-J11.*J23)./detJ;
    iJ31 = (J21.*J32-J22.*J31)./detJ;
    iJ32 = (J12.*J31-J11.*J32)./detJ;
    iJ33 = (J11.*J22-J12.*J21)./detJ;
        
    dx = iJ11.*f1 + iJ12.*f2 + iJ13.*f3;
    dy = iJ21.*f1 + iJ22.*f2 + iJ23.*f3;
    dz = iJ31.*f1 + iJ32.*f2 + iJ33.*f3;
    
    x = x - dx;
    y = y - dy;
    z = z - dz;
    
    iter = iter + 1;
    err = max(abs(f1(:)) + abs(f2(:)) + abs(f3(:)));
    
  end
      
  x = sign(u).*sqrt(x);
  y = sign(v).*sqrt(y);
  z = sign(w).*sqrt(z);
  
end

%-------------------------------------------------------------------------------
% Evaluates Chebyshev interpolants for tR and tS
%-------------------------------------------------------------------------------
function [tR,tS] = chebinterp(x,y,z,u,v,cR,cS)
  
  N = size(x,1);
  Z = zeros(N,N,N);
  
  r111 = Z; r112 = Z; r113 = Z; r122 = Z; r123 = Z; r222 = Z; r223 = Z;
  s1111 = Z; s1112 = Z; s1113 = Z; s1122 = Z; s1123 = Z; 
  s1222 = Z; s1223 = Z; s2222 = Z; s2223 = Z;
  
  [M1,M2,M3,M4,M5] = size(cR.r111);
  
  % Evaluate Chebyshev polynomials over grid
  TT1 = chebeval(x,M1,N);
  TT2 = chebeval(y,M2,N);
  TT3 = chebeval(z,M3,N);
  TT4 = chebeval(u,M4,N);
  TT5 = chebeval(v,M5,N);

  % Evaluate interpolants, skipping symmetric points
  for i5 = 1:M5
    Tv = TT5(:,:,:,i5);
    for i4 = 1:(M4-(i5-1))
      Tu = TT4(:,:,:,i4);
      TuTv = Tu.*Tv;
      for i3 = 1:2:(M3-(i5-1)-(i4-1)-1)
        Tz = TT3(:,:,:,i3);
        Tzp1 = TT3(:,:,:,i3+1);
        TzTuTv = Tz.*TuTv;
        Tzp1TuTv = Tzp1.*TuTv;
        for i2 = 1:2:(M2-(i5-1)-(i4-1)-(i3-1)-1)
          Ty = TT2(:,:,:,i2);
          Typ1 = TT2(:,:,:,i2+1);          
          for i1 = 1:2:(M2-(i5-1)-(i4-1)-(i3-1)-(i2-1)-1)
            Tx = TT1(:,:,:,i1);
            Txp1 = TT1(:,:,:,i1+1);
            TxTy = Tx.*Ty;
            Txp1Ty = Txp1.*Ty;
            TxTyp1 = Tx.*Typ1;
            Txp1Typ1 = Txp1.*Typ1;

            r111 = r111 + cR.r111(i1+1,i2,i3,i4,i5).*Txp1Ty.*TzTuTv;
            r112 = r112 + cR.r112(i1,i2+1,i3,i4,i5).*TxTyp1.*TzTuTv;
            r113 = r113 + cR.r113(i1,i2,i3+1,i4,i5).*TxTy.*Tzp1TuTv;
            r122 = r122 + cR.r122(i1+1,i2,i3,i4,i5).*Txp1Ty.*TzTuTv;
            r123 = r123 + cR.r123(i1+1,i2+1,i3+1,i4,i5).*Txp1Typ1.*Tzp1TuTv;
            r222 = r222 + cR.r222(i1,i2+1,i3,i4,i5).*TxTyp1.*TzTuTv;
            r223 = r223 + cR.r223(i1,i2,i3+1,i4,i5).*TxTy.*Tzp1TuTv;

            s1111 = s1111 + cS.s1111(i1,i2,i3,i4,i5).*TxTy.*TzTuTv;
            s1112 = s1112 + cS.s1112(i1+1,i2+1,i3,i4,i5).*Txp1Typ1.*TzTuTv;
            s1113 = s1113 + cS.s1113(i1+1,i2,i3+1,i4,i5).*Txp1Ty.*Tzp1TuTv;
            s1122 = s1122 + cS.s1122(i1,i2,i3,i4,i5).*TxTy.*TzTuTv;
            s1123 = s1123 + cS.s1123(i1,i2+1,i3+1,i4,i5).*TxTyp1.*Tzp1TuTv;
            s1222 = s1222 + cS.s1222(i1+1,i2+1,i3,i4,i5).*Txp1Typ1.*TzTuTv;
            s1223 = s1223 + cS.s1223(i1+1,i2,i3+1,i4,i5).*Txp1Ty.*Tzp1TuTv;
            s2222 = s2222 + cS.s2222(i1,i2,i3,i4,i5).*TxTy.*TzTuTv;
            s2223 = s2223 + cS.s2223(i1,i2+1,i3+1,i4,i5).*TxTyp1.*Tzp1TuTv;
          
          end
        end
      end
    end
  end
      
  tR = struct('r111',r111,'r112',r112,'r113',r113,'r122',r122,'r123',r123,'r222',r222,'r223',r223);
  tS = struct('s1111',s1111,'s1112',s1112,'s1113',s1113,'s1122',s1122,...
         's1123',s1123,'s1222',s1222,'s1223',s1223,'s2222',s2222,'s2223',s2223);
  
  
end

%-------------------------------------------------------------------------------
% Computes the first M Chebyshev polynomials evaluated at x on a N^3 grid
%-------------------------------------------------------------------------------
function T = chebeval(x,M,N)

  T = zeros(N,N,N,M);
  Tkm1 = 1;  
  Tk = x;  
  T(:,:,:,1) = Tkm1;
  T(:,:,:,2) = Tk;
  
  for idx = 3:M
    Tkp1 = 2*x.*Tk - Tkm1;
    T(:,:,:,idx) = Tkp1;
    Tkm1 = Tk; Tk = Tkp1;
  end
  
end

%-------------------------------------------------------------------------------
% Rotations of R from diagonal frame to physical frame
%-------------------------------------------------------------------------------
function r111 = rot_r111(O11,O12,O13,O21,O22,O23,O31,O32,O33,tR)
r111 = O11.*O11.*O11.*tR.r111 + ...
O11.*O11.*O12.*tR.r112 + ...
O11.*O11.*O13.*tR.r113 + ...
O11.*O12.*O11.*tR.r112 + ...
O11.*O12.*O12.*tR.r122 + ...
O11.*O12.*O13.*tR.r123 + ...
O11.*O13.*O11.*tR.r113 + ...
O11.*O13.*O12.*tR.r123 + ...
O11.*O13.*O13.*tR.r133 + ...
O12.*O11.*O11.*tR.r112 + ...
O12.*O11.*O12.*tR.r122 + ...
O12.*O11.*O13.*tR.r123 + ...
O12.*O12.*O11.*tR.r122 + ...
O12.*O12.*O12.*tR.r222 + ...
O12.*O12.*O13.*tR.r223 + ...
O12.*O13.*O11.*tR.r123 + ...
O12.*O13.*O12.*tR.r223 + ...
O12.*O13.*O13.*tR.r233 + ...
O13.*O11.*O11.*tR.r113 + ...
O13.*O11.*O12.*tR.r123 + ...
O13.*O11.*O13.*tR.r133 + ...
O13.*O12.*O11.*tR.r123 + ...
O13.*O12.*O12.*tR.r223 + ...
O13.*O12.*O13.*tR.r233 + ...
O13.*O13.*O11.*tR.r133 + ...
O13.*O13.*O12.*tR.r233 + ...
O13.*O13.*O13.*tR.r333;

end

function r112 = rot_r112(O11,O12,O13,O21,O22,O23,O31,O32,O33,tR)
r112 = O11.*O11.*O21.*tR.r111 + ...
O11.*O11.*O22.*tR.r112 + ...
O11.*O11.*O23.*tR.r113 + ...
O11.*O12.*O21.*tR.r112 + ...
O11.*O12.*O22.*tR.r122 + ...
O11.*O12.*O23.*tR.r123 + ...
O11.*O13.*O21.*tR.r113 + ...
O11.*O13.*O22.*tR.r123 + ...
O11.*O13.*O23.*tR.r133 + ...
O12.*O11.*O21.*tR.r112 + ...
O12.*O11.*O22.*tR.r122 + ...
O12.*O11.*O23.*tR.r123 + ...
O12.*O12.*O21.*tR.r122 + ...
O12.*O12.*O22.*tR.r222 + ...
O12.*O12.*O23.*tR.r223 + ...
O12.*O13.*O21.*tR.r123 + ...
O12.*O13.*O22.*tR.r223 + ...
O12.*O13.*O23.*tR.r233 + ...
O13.*O11.*O21.*tR.r113 + ...
O13.*O11.*O22.*tR.r123 + ...
O13.*O11.*O23.*tR.r133 + ...
O13.*O12.*O21.*tR.r123 + ...
O13.*O12.*O22.*tR.r223 + ...
O13.*O12.*O23.*tR.r233 + ...
O13.*O13.*O21.*tR.r133 + ...
O13.*O13.*O22.*tR.r233 + ...
O13.*O13.*O23.*tR.r333;
end

function r113 = rot_r113(O11,O12,O13,O21,O22,O23,O31,O32,O33,tR)
r113 = O11.*O11.*O31.*tR.r111 + ...
O11.*O11.*O32.*tR.r112 + ...
O11.*O11.*O33.*tR.r113 + ...
O11.*O12.*O31.*tR.r112 + ...
O11.*O12.*O32.*tR.r122 + ...
O11.*O12.*O33.*tR.r123 + ...
O11.*O13.*O31.*tR.r113 + ...
O11.*O13.*O32.*tR.r123 + ...
O11.*O13.*O33.*tR.r133 + ...
O12.*O11.*O31.*tR.r112 + ...
O12.*O11.*O32.*tR.r122 + ...
O12.*O11.*O33.*tR.r123 + ...
O12.*O12.*O31.*tR.r122 + ...
O12.*O12.*O32.*tR.r222 + ...
O12.*O12.*O33.*tR.r223 + ...
O12.*O13.*O31.*tR.r123 + ...
O12.*O13.*O32.*tR.r223 + ...
O12.*O13.*O33.*tR.r233 + ...
O13.*O11.*O31.*tR.r113 + ...
O13.*O11.*O32.*tR.r123 + ...
O13.*O11.*O33.*tR.r133 + ...
O13.*O12.*O31.*tR.r123 + ...
O13.*O12.*O32.*tR.r223 + ...
O13.*O12.*O33.*tR.r233 + ...
O13.*O13.*O31.*tR.r133 + ...
O13.*O13.*O32.*tR.r233 + ...
O13.*O13.*O33.*tR.r333;
end

function r122 = rot_r122(O11,O12,O13,O21,O22,O23,O31,O32,O33,tR)
r122 = O11.*O21.*O21.*tR.r111 + ...
O11.*O21.*O22.*tR.r112 + ...
O11.*O21.*O23.*tR.r113 + ...
O11.*O22.*O21.*tR.r112 + ...
O11.*O22.*O22.*tR.r122 + ...
O11.*O22.*O23.*tR.r123 + ...
O11.*O23.*O21.*tR.r113 + ...
O11.*O23.*O22.*tR.r123 + ...
O11.*O23.*O23.*tR.r133 + ...
O12.*O21.*O21.*tR.r112 + ...
O12.*O21.*O22.*tR.r122 + ...
O12.*O21.*O23.*tR.r123 + ...
O12.*O22.*O21.*tR.r122 + ...
O12.*O22.*O22.*tR.r222 + ...
O12.*O22.*O23.*tR.r223 + ...
O12.*O23.*O21.*tR.r123 + ...
O12.*O23.*O22.*tR.r223 + ...
O12.*O23.*O23.*tR.r233 + ...
O13.*O21.*O21.*tR.r113 + ...
O13.*O21.*O22.*tR.r123 + ...
O13.*O21.*O23.*tR.r133 + ...
O13.*O22.*O21.*tR.r123 + ...
O13.*O22.*O22.*tR.r223 + ...
O13.*O22.*O23.*tR.r233 + ...
O13.*O23.*O21.*tR.r133 + ...
O13.*O23.*O22.*tR.r233 + ...
O13.*O23.*O23.*tR.r333;
end
function r123 = rot_r123(O11,O12,O13,O21,O22,O23,O31,O32,O33,tR)
r123 = O11.*O21.*O31.*tR.r111 + ...
O11.*O21.*O32.*tR.r112 + ...
O11.*O21.*O33.*tR.r113 + ...
O11.*O22.*O31.*tR.r112 + ...
O11.*O22.*O32.*tR.r122 + ...
O11.*O22.*O33.*tR.r123 + ...
O11.*O23.*O31.*tR.r113 + ...
O11.*O23.*O32.*tR.r123 + ...
O11.*O23.*O33.*tR.r133 + ...
O12.*O21.*O31.*tR.r112 + ...
O12.*O21.*O32.*tR.r122 + ...
O12.*O21.*O33.*tR.r123 + ...
O12.*O22.*O31.*tR.r122 + ...
O12.*O22.*O32.*tR.r222 + ...
O12.*O22.*O33.*tR.r223 + ...
O12.*O23.*O31.*tR.r123 + ...
O12.*O23.*O32.*tR.r223 + ...
O12.*O23.*O33.*tR.r233 + ...
O13.*O21.*O31.*tR.r113 + ...
O13.*O21.*O32.*tR.r123 + ...
O13.*O21.*O33.*tR.r133 + ...
O13.*O22.*O31.*tR.r123 + ...
O13.*O22.*O32.*tR.r223 + ...
O13.*O22.*O33.*tR.r233 + ...
O13.*O23.*O31.*tR.r133 + ...
O13.*O23.*O32.*tR.r233 + ...
O13.*O23.*O33.*tR.r333;
end
function r222 = rot_r222(O11,O12,O13,O21,O22,O23,O31,O32,O33,tR)
r222 = O21.*O21.*O21.*tR.r111 + ...
O21.*O21.*O22.*tR.r112 + ...
O21.*O21.*O23.*tR.r113 + ...
O21.*O22.*O21.*tR.r112 + ...
O21.*O22.*O22.*tR.r122 + ...
O21.*O22.*O23.*tR.r123 + ...
O21.*O23.*O21.*tR.r113 + ...
O21.*O23.*O22.*tR.r123 + ...
O21.*O23.*O23.*tR.r133 + ...
O22.*O21.*O21.*tR.r112 + ...
O22.*O21.*O22.*tR.r122 + ...
O22.*O21.*O23.*tR.r123 + ...
O22.*O22.*O21.*tR.r122 + ...
O22.*O22.*O22.*tR.r222 + ...
O22.*O22.*O23.*tR.r223 + ...
O22.*O23.*O21.*tR.r123 + ...
O22.*O23.*O22.*tR.r223 + ...
O22.*O23.*O23.*tR.r233 + ...
O23.*O21.*O21.*tR.r113 + ...
O23.*O21.*O22.*tR.r123 + ...
O23.*O21.*O23.*tR.r133 + ...
O23.*O22.*O21.*tR.r123 + ...
O23.*O22.*O22.*tR.r223 + ...
O23.*O22.*O23.*tR.r233 + ...
O23.*O23.*O21.*tR.r133 + ...
O23.*O23.*O22.*tR.r233 + ...
O23.*O23.*O23.*tR.r333;
end
function r223 = rot_r223(O11,O12,O13,O21,O22,O23,O31,O32,O33,tR)
r223 = O21.*O21.*O31.*tR.r111 + ...
O21.*O21.*O32.*tR.r112 + ...
O21.*O21.*O33.*tR.r113 + ...
O21.*O22.*O31.*tR.r112 + ...
O21.*O22.*O32.*tR.r122 + ...
O21.*O22.*O33.*tR.r123 + ...
O21.*O23.*O31.*tR.r113 + ...
O21.*O23.*O32.*tR.r123 + ...
O21.*O23.*O33.*tR.r133 + ...
O22.*O21.*O31.*tR.r112 + ...
O22.*O21.*O32.*tR.r122 + ...
O22.*O21.*O33.*tR.r123 + ...
O22.*O22.*O31.*tR.r122 + ...
O22.*O22.*O32.*tR.r222 + ...
O22.*O22.*O33.*tR.r223 + ...
O22.*O23.*O31.*tR.r123 + ...
O22.*O23.*O32.*tR.r223 + ...
O22.*O23.*O33.*tR.r233 + ...
O23.*O21.*O31.*tR.r113 + ...
O23.*O21.*O32.*tR.r123 + ...
O23.*O21.*O33.*tR.r133 + ...
O23.*O22.*O31.*tR.r123 + ...
O23.*O22.*O32.*tR.r223 + ...
O23.*O22.*O33.*tR.r233 + ...
O23.*O23.*O31.*tR.r133 + ...
O23.*O23.*O32.*tR.r233 + ...
O23.*O23.*O33.*tR.r333;
end
